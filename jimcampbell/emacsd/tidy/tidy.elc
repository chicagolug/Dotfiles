;ELCï¿½ï¿½ï¿½
;;; Compiled by noah@Gandalf on Wed Dec  5 23:11:21 2012
;;; from file /Users/noah/.emacs.d/vendor/tidy.el
;;; in Emacs version 24.2.1
;;; with all optimizations.

;;; This file uses dynamic docstrings, first added in Emacs 19.29.

;;; This file does not contain utf-8 non-ASCII characters,
;;; and so can be loaded in Emacs versions earlier than 23.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(byte-code "\300\301!\210\300\302!\207" [require easymenu compile] 2)
#@50 Return t iff we are running XEmacs this session.
(defalias 'tidy-xemacs-p #[nil "\300\301\302 \"??\207" [string-match "^XEmacs.*" emacs-version] 3 (#$ . 574)])
(put 'tidy-xemacs-p 'byte-optimizer 'byte-compile-inline-expand)
#@50 Return t iff we are running on a Windows system.
(defalias 'tidy-windows-p #[nil "\301>\207" [system-type (emx win32 w32 mswindows ms-dos windows-nt)] 2 (#$ . 805)])
(byte-code "\300\301\302\303#\210\304\305\306\"\210\304\307\310\"\210\304\311\312\"\210\304\313\314\"\210\304\315\316\"\210\304\317\320\"\210\321\322\323\324#\207" [put tidy-windows-p byte-optimizer byte-compile-inline-expand defalias tidy-x-event-function event-function tidy-x-event-object event-object tidy-x-find-menu-item find-menu-item tidy-x-get-popup-menu-response get-popup-menu-response tidy-x-make-event make-event tidy-x-misc-user-event-p misc-user-event-p custom-declare-group tidy nil "*Provides a simple interface to the HTML Tidy program -- a free\nutility that can fix common errors in your mark-up and clean up\nsloppy editing automatically. See\n\n      <http://tidy.sourceforge.net/>\n\nfor more details.  This package provides the following functions:\n\n      `tidy-buffer',\n      `tidy-parse-config-file',\n      `tidy-save-settings', and\n      `tidy-describe-options',\n\nThese can be invoked interactively (using M-x) or via the menu-bar.\nThe function `tidy-buffer' sends the current buffer to HTML Tidy,\nreplacing the existing contents with a \"tidied\" version.  If\n`tidy-buffer' is given a prefix argument, tidy operates on the\ncurrent region, ignoring mark-up outside <BODY>...</BODY> tags\n(useful for writhing cgi scripts in Pearl).  Warnings and errors\nare presented in a compilation buffer to facilitate tracking down\nnecessary changes (e.g. C-x ` is bound to `next-error').\n\nThis package also provides menu-bar support for setting Tidy's many\noptions, and includes support for Tidy configuration files.  The\nfunction `tidy-parse-config-file' will synchronise options\ndisplayed in the menu-bar with the settings in `tidy-config-file'.\nThis is normally called by the load-hook for your HTML editing mode\n(see installation instructions below).  The function\n`tidy-save-settings' will save the current option settings to your\n`tidy-config-file'.  Finally `tidy-describe-options' allows you to\nbrowse the documentation strings associated with each option.\n"] 4)
#@307 *Path to your default tidy configuration file.

This is used by `tidy-parse-config-file' to synchronise Tidy's behaviour
inside Emacs with its behaviour outside, and by `tidy-save-settings' to
set your configuration file from within Emacs.  If you never want this to
happen, set `tidy-config-file' to nil.
(custom-declare-variable 'tidy-config-file '"~/.tidyrc" '(#$ . -2989) :group 'tidy :type 'string)
#@55 *Full path to command to call HTML tidy from a shell.
(custom-declare-variable 'tidy-shell-command '"/usr/bin/tidy" '(#$ . -3399) :group 'tidy :type 'string)
#@355 Directory where tidy places its temp files.  The default is the
current directory which works fine unless you are operating on remote
files via `ange-ftp' and its ilk, in which case it will try to place
the temp files on the remote server (and will probably fail).  If this
is the case try setting this variable to something like "/tmp/" or
"/var/tmp/".
(custom-declare-variable 'tidy-temp-directory '"." '(#$ . 3564) :group 'tidy :type 'string)
#@131  *Non-nil means menu is locked (i.e. doesn't pop down) when
selecting toggle and radio options.

See also `tidy-menu-x-position'.
(custom-declare-variable 'tidy-menu-lock 't '(#$ . 4017) :type 'boolean :group 'tidy)
#@201 *Specify menu position height in pixels.

This variable is used to set the horizontal position of the locked
menu, so don't forget to adjust it if menu position is not ok.

See also `tidy-menu-lock'.
(custom-declare-variable 'tidy-menu-x-position '211 '(#$ . -4240) :type 'integer :group 'tidy)
#@66 If t then we rebuild everything on reload. Useful for debugging.
(defvar tidy-debug nil (#$ . 4541))
#@29 Toggle value of tidy-debug.
(defalias 'tidy-toggle-debug #[nil "\301\302?\211\"\207" [tidy-debug message "tidy-debug is %s"] 4 (#$ . 4648) nil])
#@269 An alist containing all valid tidy options.
Each element is a list of the form
    (NAME, SUB-MENU, VALUE-TYPE, DEFAULT-VALUE, DOC-STRING).
This is used to automatically construct variables and a menu bar.
To add new or modify exiting options simply modify this list.
(defvar tidy-options-alist nil (#$ . 4802))
(byte-code "\203ï¿½	\203\nï¿½\306\307\211\211\211\211@\211\203@ï¿½
@\310
8\311\312\fP!\313\314\n#\210\315!\210\307L\210A\211\202ï¿½-\307\207" [tidy-options-alist tidy-debug docstring symbol name option (("add-xml-decl" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should add the XML declaration when\noutputting XML or XHTML. Note that if the input already includes an <?xml\n... ?> declaration then this option will be ignored.") ("add-xml-pi" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option is the same as the add-xml-decl option.") ("add-xml-space" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should add xml:space=\"preserve\" to elements\nsuch as <PRE>, <STYLE> and <SCRIPT> when generating XML. This is needed if\nthe whitespace in such elements is to be parsed appropriately without\nhaving access to the DTD.") ("alt-text" "Fix Markup" "String" #1="" "\nType: String\nDefault: -none-\n\nThis option specifies the default \"alt=\" text Tidy uses for <IMG>\nattributes. This feature is dangerous as it suppresses further\naccessibility warnings. You are responsible for making your documents\naccessible to people who can not see the images!") ("ascii-chars" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nCan be used to modify behavior of -c (--clean yes) option.\nDefaults to \"yes\" when using -c. Set to \"no\" to prevent\nconverting &emdash;, &rdquo;, and other named character entities\nto their ascii equivalents.") ("assume-xml-procins" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should change the parsing of processing\ninstructions to require ?> as the terminator rather than >. This option is\nautomatically set if the input is in XML.") ("bare" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should strip Microsoft specific HTML from\nWord 2000 documents, and output spaces rather than non-breaking spaces\nwhere they exist in the input.") ("break-before-br" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output a line break before each <BR>\nelement.") ("char-encoding" "Encoding" "Encoding" "ascii" "\nType: Encoding\nDefault: ascii\nExample: ascii, latin1, raw, utf8, iso2022, mac, win1252\n\nThis option specifies the character encoding Tidy uses for both the input\nand output. Possible values are: ascii, latin1, raw, utf8, iso2022, mac,\nwin1252. For ascii, Tidy will accept Latin-1 (ISO-8859-1) character\nvalues, but will use entities for all characters whose value > 127. For\nraw, Tidy will output values above 127 without translating them into\nentities. For latin1, characters above 255 will be written as\nentities. For utf8, Tidy assumes that both input and output is encoded as\nUTF-8. You can use iso2022 for files encoded using the ISO-2022 family of\nencodings e.g. ISO-2022-JP. For mac and win1252, Tidy will accept vendor\nspecific character values, but will use entities for all characters whose\nvalue > 127.") ("clean" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should strip out surplus presentational tags\nand attributes replacing them by style rules and structural markup as\nappropriate. It works well on the HTML saved by Microsoft Office products.") ("doctype" "Fix Markup" "DocType" "auto" "\nType: DocType\nDefault: auto\nExample: auto, omit, strict, loose, transitional, user specified fpi (string)\n\nThis option specifies the DOCTYPE declaration generated by Tidy. If set to\n\"omit\" the output won't contain a DOCTYPE declaration. If set to \"auto\"\n(the default) Tidy will use an educated guess based upon the contents of\nthe document. If set to \"strict\", Tidy will set the DOCTYPE to the strict\nDTD. If set to \"loose\", the DOCTYPE is set to the loose (transitional)\nDTD. Alternatively, you can supply a string for the formal public\nidentifier (FPI). For example:\n\n      doctype: \"-//ACME//DTD HTML 3.14159//EN\"\n\nIf you specify the FPI for an XHTML document, Tidy will set\nthe system identifier to the empty string. Tidy leaves the DOCTYPE for\ngeneric XML documents unchanged.") ("drop-empty-paras" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should discard empty paragraphs. If set to\nno, empty paragraphs are replaced by a pair of <BR> elements as HTML4\nprecludes empty paragraphs.") ("drop-font-tags" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should discard <FONT> and <CENTER> tags\nrather than creating the corresponding style rules, but only if the clean\noption is also set to yes.") ("drop-proprietary-attributes" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should strip out proprietary attributes,\nsuch as MS data binding attributes.") ("enclose-block-text" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should insert a <P> element to enclose any\ntext it finds in any element that allows mixed content for HTML\ntransitional but not HTML strict.") ("enclose-text" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should enclose any text it finds in the body\nelement within a <P> element. This is useful when you want to take\nexisting HTML and use it with a style sheet.") ("error-file" "Omit" "String" "-none-" "\nType: String\nDefault: -none-\n\nThis option specifies the error file Tidy uses for errors and\nwarnings. Normally errors and warnings are output to \"stderr\".\n\nThis is option is ignored in Emacs.") ("escape-cdata" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should convert <![CDATA[]]> sections to\nnormal text.") ("fix-backslash" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should replace backslash characters \"\\\" in\nURLs by forward slashes \"/\".") ("fix-bad-comments" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should replace unexpected hyphens with \"=\"\ncharacters when it comes across adjacent hyphens. The default is yes. This\noption is provided for users of Cold Fusion which uses the comment syntax:\n<!--- --->") ("fix-uri" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should check attribute values that carry\nURIsfor illegal characters and if such are found, escape them as HTML 4\nrecommends.") ("force-output" "Input/Output" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should produce output even if errors are\nencountered. Use this option with care - if Tidy reports an error,\nthis means Tidy was not able to, or is not sure how to, fix the error,\nso the resulting output may not reflect your intention.") ("gnu-emacs" "Omit" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should change the format for reporting\nerrors and warnings to a format that is more easily parsed by GNU\nEmacs.\n\nThis option is automatically set in Emacs.") ("hide-comments" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should print out comments.") ("hide-endtags" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should omit optional end-tags when\ngenerating the pretty printed markup. This option is ignored if you are\noutputting to XML.") ("indent" "Indentation" "AutoBool" "no" "\nType: AutoBool\nDefault: no\nExample: auto, y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should indent block-level tags.  If set to\n\"auto\", this option causes Tidy to decide whether or not to indent the\ncontent of tags such as TITLE, H1-H6, LI, TD, TD, or P depending on whether\nor not the content includes a block-level element. You are advised to avoid\nsetting indent to yes as this can expose layout bugs in some browsers.") ("indent-attributes" "Indentation" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should begin each attribute on a new line.") ("indent-cdata" "Indent" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should indent <![CDATA[]]> sections.") ("indent-spaces" "Indentation" "Integer" "2" "\nType: Integer\nDefault: 2\nExample: 0, 1, 2, ...\n\nThis option specifies the number of spaces Tidy uses to indent content,\nwhen indentation is enabled.") ("input-encoding" "Encoding" "Encoding" "latin1" "\nType: Encoding\nDefault: ascii\nExample: ascii, latin1, raw, utf8, iso2022, mac, win1252\n\nThis option specifies the character encoding Tidy uses for the input. See\nchar-encoding for more info.") ("input-xml" "Input/Output" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should use the XML parser rather than the\nerror correcting HTML parser.") ("join-classes" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should combine class names to generate a\nsingle new class name, if multiple class assignments are detected on an\nelement.") ("join-styles" "Fix Markup" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should combine styles to generate a single\nnew style, if multiple style values are detected on an element.") ("keep-time" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should alter the last modified time for\nfiles it writes back to. The default is no, which allows you to tidy files\nwithout affecting which ones will be uploaded to a Web server when using a\ntool such as 'SiteCopy'. Note that this feature may not work on some\nplatforms.") ("literal-attributes" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should ensure that whitespace characters\nwithin attribute values are passed through unchanged.") ("logical-emphasis" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should replace any occurrence of <I> by <EM>\nand any occurrence of <B> by <STRONG>. In both cases, the attributes are\npreserved unchanged. This option can be set independently of the clean and\ndrop-font-tags options.") ("lower-literals" "Preference" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should convert the value of an attribute\nthat takes a list of predefined values to lower case. This is required for\nXHTML documents.") ("markup" "Input/Output" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should generate a pretty printed version of\nthe markup. Note that Tidy won't generate a pretty printed version if it\nfinds significant errors (see force-output).") ("ncr" "Preference" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should allow numeric character references.") ("new-blocklevel-tags" "Tags" "Tag names" #1# "\nType: Tag names\nDefault: -none-\nExample: tagX, tagY, ...\n\nThis option specifies new block-level tags. This option takes a space or\ncomma separated list of tag names. Unless you declare new tags, Tidy will\nrefuse to generate a tidied file if the input includes previously unknown\ntags. Note you can't change the content model for elements such as\n<TABLE>, <UL>, <OL> and <DL>.") ("new-empty-tags" "Tags" "Tag names" #1# "\nType: Tag names\nDefault: -none-\nExample: tagX, tagY, ...\n\nThis option specifies new empty inline tags. This option takes a space or\ncomma separated list of tag names. Unless you declare new tags, Tidy will\nrefuse to generate a tidied file if the input includes previously unknown\ntags. Remember to also declare empty tags as either inline or blocklevel.") ("new-inline-tags" "Tags" "Tag names" #1# "\nType: Tag names\nDefault: -none-\nExample: tagX, tagY, ...\n\nThis option specifies new non-empty inline tags. This option takes a space\nor comma separated list of tag names. Unless you declare new tags, Tidy\nwill refuse to generate a tidied file if the input includes previously\nunknown tags.") ("new-pre-tags" "Tags" "Tag names" #1# "\nType: Tag names\nDefault: -none-\nExample: tagX, tagY, ...\n\nThis option specifies new tags that are to be processed in exactly the\nsame way as HTML's <PRE> element. This option takes a space or comma\nseparated list of tag names. Unless you declare new tags, Tidy will refuse\nto generate a tidied file if the input includes previously unknown\ntags. Note you can not as yet add new CDATA elements (similar to\n<SCRIPT>).") ("numeric-entities" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output entities other than the\nbuilt-in HTML entities (&amp;, &lt;, &gt; and &quot;) in the numeric\nrather than the named entity form.") ("output-bom" "Encoding" "AutoBool" "auto" "\nType: AutoBool\nDefault: auto\nExample: auto, y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should write a Unicode Byte Order Mark\ncharacter (BOM; also known as Zero Width No-Break Space; has value of\nU+FEFF) to the beginning of the output; only for UTF-8 and UTF-16 output\nencodings. If set to \"auto\", this option causes Tidy to write a BOM to the\noutput only if a BOM was present at the beginning of the input. A BOM is\nalways written for XML/XHTML output using UTF-16 output encodings.") ("output-encoding" "Encoding" "Encoding" "ascii" "\nType: Encoding\nDefault: ascii\nExample: ascii, latin1, raw, utf8, iso2022, mac, win1252\n\nThis option specifies the character encoding Tidy uses for the output. See\nchar-encoding for more info. May only be different from input-encoding for\nLatin encodings (ascii, latin1, mac, win1252).") ("output-xhtml" "Input/Output" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should generate pretty printed output,\nwriting it as extensible HTML. This option causes Tidy to set the DOCTYPE\nand default namespace as appropriate to XHTML. If a DOCTYPE or namespace\nis given they will checked for consistency with the content of the\ndocument. In the case of an inconsistency, the corrected values will\nappear in the output. For XHTML, entities can be written as named or\nnumeric entities according to the setting of the \"numeric-entities\"\noption.  The original case of tags and attributes will be preserved,\nregardless of other options.") ("output-xml" "Input/Output" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should pretty print output, writing it as\nwell-formed XML. Any entities not defined in XML 1.0 will be written as\nnumeric entities to allow them to be parsed by a XML parser. The original\ncase of tags and attributes will be preserved, regardless of other\noptions.") ("quiet" "Input/Output" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output the summary of the numbers of\nerrors and warnings, or the welcome or informational messages.") ("quote-ampersand" "Preference" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output unadorned & characters as\n&amp;.") ("quote-marks" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output \" characters as &quot; as is\npreferred by some editing environments. The apostrophe character ' is\nwritten out as &#39; since many web browsers don't yet support &apos;.") ("quote-nbsp" "Preference" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output non-breaking space characters\nas entities, rather than as the Unicode character value 160 (decimal).") ("raw" "Omit" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0 char-encoding\n\nCurrently not used, but this option would be the same as the\nchar-encoding: raw option.") ("repeated-attributes" "Fix Markup" ("keep-first" "keep-last") "keep-last" "\nType: -\nDefault: keep-last\nExample: keep-first, keep-last\n\nThis option specifies if Tidy should keep the first or last attribute, if\nan attribute is repeated, e.g. has two align attributes.") ("replace-color" "Fix Markup" "Boolean" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should replace numeric values in color\nattributes by HTML/XHTML color names where defined, e.g. replace\n\"#ffffff\" with \"white\".") ("slide-style" "Omit" "String" "\nType: Name\nDefault: -none-\nsplit Currently not used.") ("show-body-only" "Omit" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should print only the contents of the body\ntag as an HTML fragment. Useful for incorporating existing whole pages as\na portion of another page.\n\nEmacs overrides this option.") ("show-errors" "Input/Output" "Integer" "6" "\nType: Integer\nDefault: 6\nExample: 0, 1, 2, ...\n\nThis option specifies the number Tidy uses to determine if further errors\nshould be shown. If set to 0, then no errors are shown.") ("show-warnings" "Input/Output" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should suppress warnings. This can be useful\nwhen a few errors are hidden in a flurry of warnings.") ("slide-style" "Omit" "String" #1# "\nType: Name\nDefault: -none-\n\nCurrently not used.") ("split" "Omit" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should create a sequence of slides from\nthe input, splitting the markup prior to each successive <H2>. The\nslides are written to \"slide001.html\", \"slide002.html\" etc.\n\nThere is currently no Emacs support for this option.") ("tab-size" "Indentation" "Integer" "4" "\nType: Integer\nDefault: 4\nExample: 0, 1, 2, ...\n\nThis option specifies the number of columns that Tidy uses between\nsuccessive tab stops. It is used to map tabs to spaces when reading the\ninput. Tidy never outputs tabs.") ("tidy-mark" "Preference" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should add a meta element to the document\nhead to indicate that the document has been tidied. Tidy won't add a meta\nelement if one is already present.") ("uppercase-attributes" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output attribute names in upper\ncase. The default is no, which results in lower case attribute names,\nexcept for XML input, where the original case is preserved.") ("uppercase-tags" "Preference" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should output tag names in upper case. The\ndefault is no, which results in lower case tag names, except for XML\ninput, where the original case is preserved.") ("word-2000" "Fix Markup" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should go to great pains to strip out all\nthe surplus stuff Microsoft Word 2000 inserts when you save Word documents\nas \"Web pages\".  Doesn't handle embedded images or VML.") ("wrap" "Line Wrapping" "Integer" "68" "\nType: Integer\nDefault: 68\nExample: 0, 1, 2, ...\n\nThis option specifies the right margin Tidy uses for line wrapping. Tidy\ntries to wrap lines so that they do not exceed this length. Set wrap to\nzero if you want to disable line wrapping.") ("wrap-asp" "Line Wrapping" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap text contained within ASP\npseudo elements, which look like: <% ... %>.") ("wrap-attributes" "Line Wrapping" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap attribute values, for\neasier editing. This option can be set independently of\nwrap-script-literals.") ("wrap-jste" "Line Wrapping" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap text contained within JSTE\npseudo elements, which look like: <# ... #>.") ("wrap-php" "Line Wrapping" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap text contained within PHP\npseudo elements, which look like: <?php ... ?>.") ("wrap-script-literals" "Line Wrapping" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap string literals that appear\nin script attributes. Tidy wraps long script string literals by inserting\na backslash character before the line break.") ("wrap-sections" "Line Wrapping" "Boolean" "yes" "\nType: Boolean\nDefault: yes\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should line wrap text contained within\n<![... ]> section tags.") ("write-back" "Omit" "Boolean" "no" "\nType: Boolean\nDefault: no\nExample: y/n, yes/no, t/f, true/false, 1/0\n\nThis option specifies if Tidy should write back the tidied markup to\nthe same file it read from. You are advised to keep copies of\nimportant files before tidying them, as on rare occasions the result\nmay not be what you expect.\n\nThis option is ignored by Emacs.")) nil 4 intern "tidy-" put variable-documentation make-variable-buffer-local options-alist] 6)
(defvar tidy-menu-position nil)
(defvar tidy-menu-state nil)
(byte-code "\300\301\302 \"\203ï¿½\303\304\305\"\210\303\306\307\"\210\303\310\311\"\210\202)ï¿½\303\304\312\"\210\303\306\313\"\210\303\310\314\"\210\300\207" [string-match "^XEmacs.*" emacs-version defalias tidy-menu-position #[nil "\301\302\303\304\305\306\307\257\"\207" [tidy-menu-x-position tidy-x-make-event button-release button 1 x y -5] 8] tidy-menu-lock #[(entry state path) "\306 ?\2058ï¿½\2058ï¿½	\203ï¿½\n=\204ï¿½\301 \n\307\f!\310
	\"
\311
!\2034ï¿½\312
!\313
!!\210*\314\211\207" [tidy-menu-lock tidy-menu-position state tidy-menu-state path menu interactive-p tidy-menu-lookup tidy-x-get-popup-menu-response tidy-x-misc-user-event-p tidy-x-event-function tidy-x-event-object nil result] 3] tidy-menu-lookup #[(path) "\302\303	B\"@\207" [current-menubar path tidy-x-find-menu-item "Tidy"] 4] #[nil "\301D\302 D\207" [tidy-menu-x-position -5 selected-frame] 2] #[(entry state path) "\306 ?\205Hï¿½\205Hï¿½	\203ï¿½\n=\204ï¿½\301 \n\307\f!\310	
\"\211\203Dï¿½\311
\312!\"\313!\203>ï¿½ \210\202Cï¿½\314!\210)*\315\211\207" [tidy-menu-lock tidy-menu-position state tidy-menu-state path menu interactive-p tidy-menu-lookup x-popup-menu lookup-key vconcat fboundp eval nil result command] 5] #[(dummy) "\300\301 \302\"\207" [lookup-key current-local-map [menu-bar Tidy]] 3]] 3)
#@132 Set the value of the symbol VAR-SYM to VALUE giving a message
derived from VALUE and MESS.  Pass on menu data to `tidy-menu-lock'.
(defalias 'tidy-set #[(var-sym value mess entry state &optional path) "	L\210\306\307\n	#\210\310\f
#\207" [var-sym value mess entry state path message "%s is %s" tidy-menu-lock] 4 (#$ . 30119)])
#@282 Returns a menu entry that allows us to toggle the value of SYMBOL.
SYMBOL refers to the option called NAME which has default value
DEFAULT.  TYPE should always have the value "Boolean".  MENU refers
to the sub-menu that this item belongs to and POSITION its position in
that list.
(defalias 'tidy-boolean-entry #[(symbol name type default menu) "\304\232\203$ï¿½\305	\306\307\nD\310\n\311\312F	\307D\313\257\314\315\316\310\n\317\311F&C\207\312\232\205Gï¿½\305	\306\307\nD\310\n\311\304F	\307D\320\257\314\315\316\310\n\311\317F&C\207" [default name symbol menu "no" vector tidy-set quote if nil "yes" 'toggle :style toggle :selected t 'toggle] 10 (#$ . 30455)])
#@299 Returns a menu entry that allows us to set via a radio button the
value of SYMBOL.  SYMBOL refers to the option called NAME which has
default value DEFAULT.  TYPE should be a list of the possible
values. MENU refers to the sub-menu that this item belongs to and
POSITION its position in that list.
(defalias 'tidy-list-entry #[(symbol name type default menu) "\306\211\n@\211\203jï¿½	\232\203:ï¿½\307\310\f\311	\312R\313\314
D\315
\306	F\f\314D\316\257\317\320\321\315
\306\322F&C\"\202cï¿½\307\310\f\311	\312R\313\314
D\315
\306	F\f\314D\323\257\317\320\321\315\324
	E\322\306F&C\"\nA\211\202ï¿½*\207" [element value type default name symbol nil append vector " is \"" "\"" tidy-set quote if 'toggle :style radio :selected t 'toggle string-equal menu] 13 (#$ . 31129)])
#@115 Set the value of SYMBOL identified by name to VALUE,
unless VALUE equals DEFAULT, in which case we set it to nil.
(defalias 'tidy-set-string #[(symbol name default) "J\305\306\307 \"\203ï¿½\310\311\312\n\"	\206ï¿½\313#\202'ï¿½\310\311\312\n\"	\206$ï¿½\313$\f\232?\2051ï¿½\fL*\207" [symbol last-value name default new-value string-match "^XEmacs.*" emacs-version read-string format "Set %s to: " nil] 5 (#$ . 31918) nil])
#@110 Set the value of SYMBOL identified by name to VALUE,
unless VALUE = DEFAULT, in which case we set it to nil.
(defalias 'tidy-set-integer #[(symbol name default) "J\305\306\307\310 \"\203ï¿½\311\312\313\n\"	\206ï¿½\314#\202(ï¿½\311\312\313\n\"	\206%ï¿½\314$!\f\305!U?\2057ï¿½\315\f!L*\207" [symbol last-value name default new-value string-to-number string-match "^XEmacs.*" emacs-version read-string format "Set %s to: " nil number-to-string] 6 (#$ . 32346) nil])
#@245 Returns a menu entry that allows us to set the value of SYMBOL.
SYMBOL refers to the option called NAME which has default value
DEFAULT.  TYPE should always be one of "String" "Tags", or
"DocType".  MENU and POSITION are not used in this case.
(defalias 'tidy-string-entry #[(symbol name type default menu) "\303\304P\305\306	D\nF\"C\207" [name symbol default vector "set " tidy-set-string quote] 6 (#$ . 32816)])
#@230 Returns a menu entry that allows us to set the value of SYMBOL.
SYMBOL refers to the option called NAME which has default value
DEFAULT.  TYPE should always have the value "Integer". MENU and
POSITION are not used in this case. 
(defalias 'tidy-integer-entry #[(symbol name type default menu) "\303\304P\305\306	D\nF\"C\207" [name symbol default vector "set " tidy-set-integer quote] 6 (#$ . 33239)])
#@29 The first part of teh menu.
(defvar tidy-top-menu nil (#$ . 33648))
(byte-code "\203ï¿½	\203\nï¿½\302\303\207" [tidy-top-menu tidy-debug ("Tidy" ["Tidy buffer" tidy-buffer :active (and tidy-shell-command (file-executable-p (car (split-string tidy-shell-command))))] ["Tidy region" (tidy-buffer 1) :active (and tidy-shell-command (file-executable-p (car (split-string tidy-shell-command)))) :keys "C-u \\[tidy-buffer]"] "----------------------------------------------" ["Parse config file" tidy-parse-config-file :active (and tidy-config-file (file-exists-p tidy-config-file))] ["Save settings" tidy-save-settings :active (and tidy-config-file (file-exists-p tidy-config-file))] "----------------------------------------------" ["Menu Lock" (tidy-set 'tidy-menu-lock (if tidy-menu-lock nil t) "Menu Lock" 'top 'toggle) :style toggle :selected (if tidy-menu-lock t nil)]) nil] 1)
#@30 The second to last sub-menu.
(defvar tidy-doctype-menu nil (#$ . 34531))
(byte-code "\203ï¿½	\203\nï¿½\302\303\207" [tidy-doctype-menu tidy-debug ("Set doctype" ["auto" (tidy-set 'tidy-doctype nil "doctype" 'doctype 'toggle) :style radio :selected (if (null tidy-doctype) t nil)] ["omit" (tidy-set 'tidy-doctype "omit" "doctype" 'doctype 'toggle) :style radio :selected (if (equal tidy-doctype "omit") t nil)] ["strict" (tidy-set 'tidy-doctype "strict" "doctype" 'doctype 'toggle) :style radio :selected (if (equal tidy-doctype "strict") t nil)] ["loose" (tidy-set 'tidy-doctype "loose" "doctype" 'doctype 'toggle) :style radio :selected (if (equal tidy-doctype "loose") t nil)] ["transitional" (tidy-set 'tidy-doctype "transitional" "doctype" 'doctype 'toggle) :style radio :selected (if (equal tidy-doctype "transitional") t nil)] ["fpi" (null nil) :style radio :selected (if (or (null tidy-doctype) (equal tidy-doctype "omit") (equal tidy-doctype "strict") (equal tidy-doctype "loose")) nil t)] ["reset fpi" (tidy-set-string 'tidy-doctype "doctype" #1="" #1#)]) nil] 1)
#@20 The last sub-menu.
(defvar tidy-char-encoding-menu nil (#$ . 35609))
(byte-code "\203ï¿½	\203\nï¿½\302\303\207" [tidy-char-encoding-menu tidy-debug ("Set char-encoding" ["ascii" (tidy-set 'tidy-char-encoding nil "char-encoding" 'encoding 'toggle) :style radio :selected (if (null tidy-char-encoding) t nil)] ["raw" (tidy-set 'tidy-char-encoding "raw" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "raw") t nil)] ["latin1" (tidy-set 'tidy-char-encoding "latin1" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "latin1") t nil)] ["utf8" (tidy-set 'tidy-char-encoding "utf8" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "utf8") t nil)] ["iso2022" (tidy-set 'tidy-char-encoding "iso2022" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "iso2022") t nil)] ["mac" (tidy-set 'tidy-char-encoding "mac" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "mac") t nil)] ["win1252" (tidy-set 'tidy-char-encoding "win1252" "char-encoding" 'encoding 'toggle) :style radio :selected (if (equal tidy-char-encoding "win1252") t nil)]) nil] 1)
#@20 Menu used by tidy.
(defvar tidy-menu nil (#$ . 36843))
(byte-code "\203ï¿½	\203{\n\306\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211()*+,-./012345678\2119@\211\2036@,A@+\3078*\3108)\311\312,P!(\306*\313\232\203tï¿½\314\202\324ï¿½*\315\232\203\203ï¿½\316\317*\202\324ï¿½*\320\232\203\217ï¿½\306\202\324ï¿½*\321\232\203\233ï¿½\322\202\324ï¿½*\323\232\203\247ï¿½\322\202\324ï¿½*\324\232\203\263ï¿½\325\202\324ï¿½*\326\232\203\277ï¿½\306\202\324ï¿½*<\203\312ï¿½\316\202\324ï¿½\327\330*\331,R!\210+\332\232\203\f(,*)\333%*\313\232\204\373ï¿½*\315\232\204\373ï¿½*<\203\3348
\"8\202-\3347
\"7\202-+\335\232\203J\f(,*)\336%*\313\232\2046*\315\232\2046*<\203@\3342
\"2\202-\3341
\"1\202-+\337\232\203\205\f(,*)\340%*\313\232\204q*\315\232\204q*<\203{\3346
\"6\202-\3345
\"5\202-+\341\232\203\300\f(,*)\342%*\313\232\204\254*\315\232\204\254*<\203\266\3340
\"0\202-\334/
\"/\202-+\343\232\203\373\f(,*)\344%*\313\232\204\347*\315\232\204\347*<\203\361\3344
\"4\202-\3343
\"3\202-+\345\232\203-\f(,*)\346%*\313\232\204*\315\232\203&\334.
\".\202-\334-
\"-9A\2119\202Eï¿½\334:\334\332C87#C\334\337C65#C\334\343C43#C\334\335C21#C\334\341C0/#C\334\345C.-#C;C<C\347&\n.\306\207" [tidy-menu tidy-debug tidy-options-alist option entry-function entry nil 2 3 intern "tidy-" "Boolean" tidy-boolean-entry "AutoBool" tidy-list-entry ("auto" "yes" "no") "DocType" "Tag names" tidy-string-entry "String" "Integer" tidy-integer-entry "Encoding" error "Tidy: unhandled value type " " for " "Fix Markup" markup append "Indentation" indent "Line Wrapping" line-wrap "Input/Output" io "Preference" preference "Tags" tags (["Describe options" tidy-describe-options t]) symbol default type sub-menu name tags-menu-set tags-menu-bool io-menu-set io-menu-bool indent-menu-set indent-menu-bool preference-menu-set preference-menu-bool line-wrap-menu-set line-wrap-menu-bool markup-menu-set markup-menu-bool options-alist tidy-top-menu tidy-doctype-menu tidy-char-encoding-menu] 22)
#@81 Set up the tidy menu in MAP. Used to set up a Tidy menu in your
favourite mode.
(defalias 'tidy-build-menu #[(&optional map) "\204ï¿½\302 \303 \210\304	!\210\305\306!\210\307\310\311	$\210\312	\"\207" [map tidy-menu current-local-map tidy-parse-config-file easy-menu-remove (lambda (#1=#:def-tmp-var) (defvar tidy-menu-symbol #1# #2="Menu for tidy.el")) nil easy-menu-do-define tidy-menu-symbol #2# easy-menu-add] 5 (#$ . 38975) nil])
#@54 Describe variable associated with the text at point.
(defalias 'tidy-describe-this-option #[(click) "\306\307\310\311 \"\203ï¿½\312!\202<ï¿½\211:\203ï¿½	A@\202\"ï¿½\313 `\314\315F)\316\n8\206;ï¿½\nA@:\2038ï¿½\nA@@\202;ï¿½\nA@)\317\"\320\211\205\221ï¿½\313 \321\322\323 \"\"#r\324\216J\325\326!\211q\210\320$ed|\210\327!\316\320O\330\261\210\f\203zï¿½\fc\210\202}ï¿½\331c\210\332\333\334\"\261\210\335$\336\337\340\"\210\341
!,+\207" [click event position variable value buffer get-text-property string-match "^XEmacs.*" emacs-version event-point selected-window (0 . 0) 0 5 tidy-variable nil mapcar #[(frame) "\301!B\207" [frame frame-selected-window] 3] frame-list ((byte-code "\304\211\203(ï¿½\n@\305	@!\203!ï¿½\306	A!\203!ï¿½\307	@	A\310#\210\nA\211\204ï¿½*\306!\2034ï¿½\311\310\"\210\304\207" [save-selected-window-alist elt #1=#:--cl-dolist-temp-- save-selected-window-window nil frame-live-p window-live-p set-frame-selected-window norecord select-window] 5)) get-buffer-create "*Help*" symbol-name " is set to " "set to the default value" "\n\n" documentation-property variable-documentation t local-set-key [(q)] tidy-quit-describe-options pop-to-buffer save-selected-window-alist save-selected-window-window buffer-read-only] 6 (#$ . 39419) "e"])
#@60 Rid thyself of any display associated with Tidy's options.
(defalias 'tidy-quit-describe-options #[nil "\300\301\302!!\210\303\301\302!!\210\300\301\304!!\210\303\301\304!!\207" [bury-buffer get-buffer "*tidy-options*" delete-windows-on "*Help*"] 3 (#$ . 40682) nil])
#@55 Get the current line number (in the buffer) of point.
(defalias 'tidy-current-line #[nil "\214~\210\212\300 \210\301\302`\"T*\207" [beginning-of-line count-lines 1] 3 (#$ . 40956) nil])
#@67 Interactively access documentation strings for `tidy-' variables.
(defalias 'tidy-describe-options #[nil "\306\307!\211\203ï¿½\310!\202)\311\307!\312\211\313\312
)\314G\315\\*\316 \315\245+*+V\2036ï¿½*\2028ï¿½+\211,\317_-\312\211./\3120q\210\3131ed|\210\320\321\322 \"\203bï¿½\323\324\325\"\210\202gï¿½\323\326\325\"\210\323\327\330\"\210\331\332\333\261\210\334 .)G\315\245T\211/\317_S0)\242@\211\203)A)\fT\211/W\203\251ï¿½`c\210`\335c\210\202	\f0W\203\336ï¿½\f/U\203\277ï¿½\336.!\210\202\302ï¿½\337y\210\313\210`,j\210`\340	\n\341\342$\210`c\210`\202	\f0U\203\355ï¿½\336.!\210\202\360ï¿½\337y\210\313\210`-j\210`\340	\n\341\342$\210`c\210`\340	\n\341\343$\210\340	\n\344\345\346P!$\210\202\204ï¿½\3471\350 \210\310!.\f)\207" [buffer start end name count tidy-options-alist get-buffer "*tidy-options*" pop-to-buffer get-buffer-create 0 nil "drop-proprietary-attributes" 3 window-width 2 string-match "^XEmacs.*" emacs-version local-set-key [(button2)] tidy-describe-this-option [(mouse-2)] [(q)] tidy-quit-describe-options "Click [mouse-2] over option to see its description.  " "Type \"q\" to quit." "\n\n" tidy-current-line "\n" goto-line 1 put-text-property mouse-face default highlight tidy-variable intern "tidy-" t beginning-of-buffer option-alist column2a column2b column2 column3 start-line third-length two-third-length buffer-read-only] 8 (#$ . 41148) nil])
#@81 If `tidy-config-file' is non-nil parse that file setting variables accordingly.
(defalias 'tidy-parse-config-file #[nil "\205aï¿½\305!\204ï¿½\306\307\"\207\306\310!\210p\311\312\"\212	q\210eb\210\313\314\315\312#\2032ï¿½\316\317\315\211#\210\202!ï¿½eb\210\313\320\315\312#\203Uï¿½\321\322\323!P\322\324!\212\nq\210\325\f!L\210+\2025ï¿½\326\315!\210\327	!\210+\306\330!\207" [tidy-config-file config-buffer html-buffer value variable file-exists-p message "Could not find config file \"%s\".  Winging it." "Parsing config file..." find-file-noselect t re-search-forward "//.*\n" nil replace-match "" "\\([a-z,-]+\\):\\s-*\\(.*\\)\\s-*" "tidy-" match-string 1 2 intern set-buffer-modified-p kill-buffer "Parsing config file...done"] 4 (#$ . 42562) nil])
#@108 Query saving the current settings to your `tidy-config-file'.
Perhaps put this on your `kill-buffer-hook'.
(defalias 'tidy-save-settings #[(&optional config-file) "\204ï¿½	\205pï¿½\306 \203ï¿½\307\310!\205pï¿½\311\312\"\np\313\211\211\211\212q\210ed|\210\314c\210@\211\203gï¿½A@\315\316
P!\212q\210\fJ)\2036ï¿½@\317\320\261\210\2026ï¿½\321 \210\322!.\207" [config-file tidy-config-file tidy-options-alist value symbol name interactive-p y-or-n-p "Save settings to your tidy configuration file? " find-file-noselect t nil "// HTML Tidy configuration file \n" intern "tidy-" ": " "\n" save-buffer kill-buffer option outer-buffer option-alist buffer] 7 (#$ . 43319) nil])
#@61 Used to prevent error buffer form being marked as modified.
(defalias 'tidy-set-buffer-unmodified #[(dummy1 dummy2 dumm3) "\300\301!\207" [set-buffer-modified-p nil] 2 (#$ . 44022)])
#@260 Run the HTML Tidy program on the current buffer.
If PREFIX is non-nil, or if called interactively with a prefix argument,
then Tidy is applied to the currently selected region.  Any error messages
generated by that program are sent to "*tidy-errors*" buffer.
(defalias 'tidy-buffer #[(&optional prefix) "\204ï¿½e\202\nï¿½\306 \204ï¿½d\202ï¿½`\307\310p!!\311\f!\312P\313
!;\314<\311\f!\315P=>\316=\317
\320\203@ï¿½\321\202Aï¿½\322\323\324\325\260?\326\211@A\327B\330C	\nV\203`ï¿½\306 `;\203tï¿½\212;q\210\331\330!\210\332;!\210)\313<!\203\205ï¿½\212<q\210ed|\210)\333=!\210\334	\n?<\330%\210\335
\336\";\337
!\203\244ï¿½\340
!\210\337=!\203\260ï¿½\340=!\210\212;q\210eb\210\341\342\330\336#\203\323ï¿½\343\344\345!!A\343\344\346!!@\344\326!Beb\210\341\347\330\336#\203\347ï¿½\350\351P!\210\202\326ï¿½\336D\352 \210\331\330!\210\353\354!\210\355\354\356\336\211$\210eb\210)\357<!\203\212<q\210eb\210\336E\360\361!\203\336C*@\326V\204IC\204I\362p!F\363F!GH\204A	\n|\210\364<!\210\365FG\"\210*A\326U\203`@\326U\203`\366;\336\"\210\202f\367;\336\"\210\366<\336\"\210C\203w\370\371!\202|\370\372B\".\f\207" [prefix start end filename tidy-temp-directory error-file mark file-name-nondirectory buffer-file-name directory-file-name "/temp-tidy-errors" get-buffer " *tidy-temp*" "/temp-tidy-config" " -config " " --error-file " " --write-back no" " --show-body-only yes" " --show-body-only no" " --gnu-emacs yes" " --gnu-emacs-file \"" "\"" 0 "" nil set-buffer-modified-p kill-buffer tidy-save-settings shell-command-on-region find-file-noselect t file-exists-p delete-file re-search-forward "\\([0-9]+\\) warnings?, \\([0-9]+\\) errors? were found!" string-to-number match-string 1 2 "stdin:" replace-match ":" compilation-mode make-variable-buffer-local after-change-functions add-hook tidy-set-buffer-unmodified buffer-live-p looking-at "Segmentation" get-buffer-window window-start insert-buffer set-window-start delete-windows-on display-buffer message "Tidy: Segmentation violation!!!  Check your character encoding." "%s" error-buffer temp-buffer config-file tidy-shell-command command errors warnings tidy-message seg-error buffer-read-only case-fold-search window top tidy-markup] 12 (#$ . 44212) "P"])
(provide 'tidy)

